#!/usr/bin/env python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import waggle.plugin
import math


subsystem_table = {
    '0000000000000000': 'nc',
    '0000000000000001': 'ep',
}


def normalize_type(x):
    if isinstance(x, bool):
        return int(x)
    if isinstance(x, float):
        return round(x, 3)
    return x


# units
A = 1.0
V = 1.0
mV = V * 1e-3
muV = V * 1e-6
count = 1.0

cu_count_per_amp = (264.0/1.0 * mV/A) * (1.0/65.5 * count/muV) * 2**-5
cu_amp_per_count = 1 / cu_count_per_amp


def convert_cu(counts):
    # backwards compatible with old adc
    if counts > 1500:
        counts >>= 5
    return (counts - 144) * cu_amp_per_count


def calcR(adc):
    return 23000 * (2**12/adc - 1)


def calcT(adc):
    A = 0.00088570897
    B = 0.00025163902
    C = 0.00000019289731

    R = calcR(adc)
    logR = math.log(R)

    T = 1 / (A + B * logR + C * logR**3)
    TC = T - 273.15

    return TC


def convert_th(x):
    return calcT(x)


adc_to_vdc_factor = 1.0 / (3.0 / (3.0 + 17.0) * (2**12 / 3.3))


def convert_vdc(adc_value):
    return adc_value * adc_to_vdc_factor


def convert_htu21d_temperature(raw_t):
    raw_t &= 0xFFFC
    t = raw_t / 2**16
    temperature = -46.85 + (175.72 * t)

    return round(temperature, 2)


def convert_htu21d_humidity(raw_h):
    raw_h &= 0xFFFC
    h = raw_h / 2**16
    humidity = -6.0 + (125.0 * h)
    return round(humidity, 2)


def no_conversion(x):
    return x


conversion_table = {
    0xff06: convert_cu,
    0xff08: convert_vdc,
    0xff10: convert_th,
    (0x0002, 1): convert_htu21d_temperature,
    (0x0002, 2): convert_htu21d_humidity,
}


rewrite_sensor_subsystem = {
    0x0002: 'wagman',
    0xff05: 'wagman',
    0xff06: 'wagman',
    0xff07: 'wagman',
    0xff08: 'wagman',
    0xff09: 'wagman',
    0xff0a: 'wagman',
    0xff10: 'wagman',
    0xff13: 'wagman',
    0xff14: 'wagman',
}


def get_conversion(sensorID, paramID):
    try:
        return conversion_table[(sensorID, paramID)]
    except KeyError:
        pass

    try:
        return conversion_table[sensorID]
    except KeyError:
        pass

    return no_conversion


def process_measurements(message, datagram, sensorgram):
    conversion = get_conversion(
        sensorgram['sensor_id'],
        sensorgram['parameter_id'])

    subsystem = subsystem_table[message['sender_sub_id']]

    try:
        subsystem = rewrite_sensor_subsystem[sensorgram['sensor_id']]
    except KeyError:
        pass

    yield {
        'subsystem': subsystem,
        'sensor': sensorgram['sensor_id'],
        'parameter': sensorgram['parameter_id'],
        'value_raw': normalize_type(sensorgram['value']),
        'value_hrf': normalize_type(conversion(sensorgram['value'])),
    }


if __name__ == '__main__':
    waggle.plugin.start_processing_measurements(process_measurements)
