#!/usr/bin/env python3
import os
import time
import json
import cv2
import numpy as np

from waggle.pipeline import Plugin, ImagePipelineHandler
import waggle.plugin


EXCHANGE = 'image_pipeline'
ROUTING_KEY_EXPORT = 'exporter'


plugin = waggle.plugin.PrintPlugin()


def get_default_configuration():
    return {
        'source': 'bottom',
        'model': 'models/ssd_mobilenet_coco.pb',
        'model_desc': 'models/ssd_mobilenet_coco.pbtxt',
        'classes': 'models/ssd_mobilenet_coco.classes',
        'input_scale': 0.00784,
        'input_size': (300, 300),
        'input_mean_subtraction': (127.5, 127.5, 127.5),
        'input_channel_order': 'RGB',
        'detection_interval': 300,  # every 5 mins
        'sampling_interval': -1,  # None, by default
        'detection_confidence': 0.3,  # least detection confidence
    }


def read_json_file(path):
    with open(path) as file:
        return json.load(file)


def read_model_file(path, desc):
    _, ext = os.path.splitext(path)
    if 'pb' in ext:
        return cv2.dnn.readNetFromTensorflow(path, desc)
    if 'caffemodel' in ext:
        return cv2.dnn.readNetFromCaffe(path, desc)
    raise ValueError('Model extension {} not recognized.'.format(ext))


class CarPedDetector(Plugin):
    plugin_name = 'image_car_ped_detector'
    plugin_version = '0'

    def __init__(self):
        super().__init__()
        self.config = self._get_config_table()
        self.input_handler = ImagePipelineHandler(routing_in=self.config['source'])

    def _get_config_table(self):
        try:
            return read_json_file('/wagglerw/waggle/image_car_ped_detector.conf')
        except Exception:
            return get_default_configuration()

    def _detect(self, img_blob, cvNet, classes, confidence=0.3, img_rows=1, img_cols=1):
        cvNet.setInput(img_blob)
        cvOut = cvNet.forward()

        output = {}
        for detection in cvOut[0, 0, :, :]:
            score = float(detection[2])
            if score > confidence:
                class_index = int(detection[1])
                class_name = classes[class_index]
                if class_name not in output:
                    output[class_name] = {}

                detection_index = len(output[class_name].keys())
                left = int(detection[3] * img_cols)
                top = int(detection[4] * img_rows)
                right = int(detection[5] * img_cols)
                bottom = int(detection[6] * img_rows)

                output[class_name][detection_index] = (
                    left, top, right, bottom
                )
        return output

    def _print(self, detected_objects):
        for detected_object in detected_objects:
            print('%s was found at' % (detected_object,))
            for index, rect in detected_objects[detected_object].items():
                left, top, right, bottom = rect
                x = left + ((right - left) / 2.)
                y = top + ((bottom - top) / 2.)
                print('    x:%5d, y:%5d' % (x, y))
            print('Total: %s %d' % (detected_object, len(detected_objects[detected_object].keys())))

    def close(self):
        self.input_handler.close()

    def run(self):
        # Load models
        model_path = self.config['model']
        model_desc = self.config['model_desc']

        print('Loading model {}'.format(model_path))
        cvNet = read_model_file(model_path, model_desc)

        # NOTE: Did not work in Waggle 2.9.0; needs investigation
        # Use OpenCL
        # cvNet.setPreferableBackend(cv2.dnn.DNN_BACKEND_DEFAULT)
        # cvNet.setPreferableTarget(cv2.dnn.DNN_TARGET_OPENCL)

        # Load classes
        classes = {}

        with open(self.config['classes'], 'r') as file:
            for line in file:
                sp = line.strip().split(' ')
                classes[int(sp[0])] = sp[1]

        try:
            confidence = float(self.config['detection_confidence'])
        except Exception:
            confidence = 0.3

        self.config['last_updated'] = time.time() - self.config['detection_interval']
        self.config['last_sampled'] = time.time() - self.config['sampling_interval']

        if self.config['sampling_interval'] < 1:
            do_sampling = False
        else:
            do_sampling = True

        while True:
            current_time = time.time()

            if current_time - self.config['last_updated'] > 3:
                return_code, message = self.input_handler.read()
                print('input handler return code', return_code)

                if return_code is True:
                    print(time.asctime())
                    print('Received frame')
                    properties, frame = message
                    nparr_img = np.fromstring(frame, np.uint8)
                    img = cv2.imdecode(nparr_img, cv2.IMREAD_COLOR)
                    counter = 0
                    try:
                        img_blob = cv2.dnn.blobFromImage(
                            img,
                            self.config['input_scale'],
                            tuple(self.config['input_size']),
                            tuple(self.config['input_mean_subtraction']),
                            swapRB=True if 'RGB' in self.config['input_channel_order'].upper() else False,
                            crop=False
                        )
                        print("So far %d exceptions" % counter);
                        detected_objects = self._detect(
                            img_blob,
                            cvNet,
                            classes,
                            confidence=confidence,
                            img_rows=img.shape[0],
                            img_cols=img.shape[1]
                        )
                    except Exception:
                        counter = counter + 1
                        print("Exception occurred, caught and continuing");
                        pass

                    cars = detected_objects.get('car', {})
                    people = detected_objects.get('person', {})

                    count_car = len(cars)
                    count_person = len(people)

                    print('cars={} pedestrians={}'.format(count_car, count_person))

                    # Sampling the result
                    if do_sampling:
                        if current_time - self.config['last_sampled'] > self.config['sampling_interval']:
                            result = {
                                'processing_software': os.path.basename(__file__),
                                'results': json.dumps(detected_objects)
                            }
                            properties.headers.update(result)
                            self.input_handler.write(
                                ROUTING_KEY_EXPORT,
                                frame,
                                properties.headers
                            )
                            self.config['last_sampled'] = current_time
                self.config['last_updated'] = current_time
            else:
                wait_time = current_time - self.config['last_updated']
                if wait_time > 0.1:
                    time.sleep(wait_time)


if __name__ == '__main__':
    plugin = CarPedDetector.defaultConfig().run()
