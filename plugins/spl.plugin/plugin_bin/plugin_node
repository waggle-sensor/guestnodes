#!/usr/bin/python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import argparse
import datetime
import json
import os
import time
import pyaudio
import numpy as np
import wave
import waggle.plugin
import math


parser = argparse.ArgumentParser()
parser.add_argument('--print', action='store_true')
args = parser.parse_args()

if args.print:
    plugin = waggle.plugin.PrintPlugin()
else:
    plugin = waggle.plugin.Plugin()

device = os.environ.get('WAGGLE_MICROPHONE', '/dev/waggle_microphone')


# TODO: There should be better way to find Waggle microphone
def get_default_configuration():
    return {
        'audio_name': 'USB PnP Sound Device:',
        'audio_channels': 1,
        'audio_rate': 44100,
        'audio_chunk': 512,
        'sampling_period': 60,  # in Second
        'interval': 60 * 17,  # 17 minute for distributed sampling over hours
        'octave_band': 1,
        'recording': False,
        'dft_length': 44100,    ## DFT length
        'digital_audio_max': 32768,      ## = 2**15
    }


class SoundPressureLevel:

    def __init__(self, hrf=False, node_id='NO_ID'):
        super().__init__()
        self.config = self._get_config_table()
        self.hrf = hrf
        self.audio_name = self.config['audio_name']
        self.audio_format = pyaudio.paInt16
        self.audio_channels = self.config['audio_channels']
        self.audio_rate = self.config['audio_rate']
        self.audio_chunk = self.config['audio_chunk']
        self.audio_sampling_seconds = self.config['sampling_period']
        self.total_count = int(self.audio_rate / self.audio_chunk * self.audio_sampling_seconds)
        self.octave_band = self.config['octave_band']
        self.recording = self.config['recording']
        self.N = self.config['dft_length']
        self.ref = self.config['digital_audio_max']

    def _get_config_table(self, file_name='/wagglerw/waggle/audio_spl.conf'):
        config = None
        try:
            with open(file_name) as file:
                config = json.load(file)
        except Exception:
            pass

        if config is None:
            config = get_default_configuration()
            try:
                with open(file_name, 'w') as file:
                    file.write(json.dumps(config, sort_keys=True, indent=4))
            except:
                pass
        return config

    def _read_callback(self, in_data, frame_count, time_info, status):
        self.frames.append(np.frombuffer(in_data, dtype=np.int16))
        self.frame_count += 1
        if self.frame_count >= self.total_count:
            return (in_data, pyaudio.paComplete)
        else:
            return (in_data, pyaudio.paContinue)

    def _open_and_read(self):
        try:
            audio = pyaudio.PyAudio()
            device_count = audio.get_device_count()
            device_index = -1

            for i in range(device_count):
                device_info = audio.get_device_info_by_index(i)
                if self.audio_name in device_info['name']:
                    device_index = device_info['index']
                    break

            if device_index < 0:
                audio.terminate()
                return -1, 'Failed to find Waggle microphone'

            stream = audio.open(
                format=self.audio_format,
                channels=self.audio_channels,
                rate=self.audio_rate,
                input=True,
                frames_per_buffer=self.audio_chunk,
                input_device_index=device_index,
                stream_callback=self._read_callback)

            self.frames = []
            self.frame_count = 0
            error_code = 1
        except:
            pass

        record_time = time.time()
        try:
            stream.start_stream()
            # Give it 30 more seconds as timeout
            for i in range(self.audio_sampling_seconds + 30):
                if self.frame_count >= self.total_count:
                    error_code = 0
                    break
                time.sleep(1)
        except Exception as ex:
            return -3, str(ex)
        finally:
            stream.stop_stream()
            stream.close()
            audio.terminate()

        if self.recording is True:
            base_dir = '/wagglerw/files/audio'
            if not os.path.exists(base_dir):
                os.makedirs(base_dir)
            file_name = os.path.join(base_dir, 'audio_{:%Y%m%dT%H%M%S}.wav'.format(datetime.datetime.now()))
            waveFile = wave.open(file_name, 'wb')
            waveFile.setnchannels(self.audio_channels)
            waveFile.setsampwidth(audio.get_sample_size(self.audio_format))
            waveFile.setframerate(self.audio_rate)
            waveFile.writeframes(b''.join(self.frames))
            waveFile.close()

        if error_code == 0:
            return record_time, self.frames
        else:
            return -2, 'Timeout on data collection'

    def cal_freq_range(self, xf, val):
        octv = self.octave_band
        n = 5 * octv + (octv - 1) + 10
        m = 4 * octv + 10

        center = []
        for i in reversed(range(n)):
            c = 1000. / 2 ** ((i + 1) / octv)
            if c > 20:
                center.append(round(c, 4))
        center.append(1000)
        for i in range(m):
            c = 1000. * 2 ** ((i + 1) / octv)
            if c < 22000:
                center.append(round(c, 4))

        upper = []
        for i in range(len(center)):
            u = center[i] * 2 ** (1 / (octv * 2))
            if len(upper) < (octv * 10):
                upper.append(round(u, 4))
        lower = []
        for i in range(len(center)):
            l = center[i] / 2 ** (1 / (octv * 2))
            if len(lower) < (octv * 10):
                lower.append(round(l, 4))

        octave = {}
        avg = []
        for i in range(len(upper)):
            octave[i] = []

        for hz, magnitude in zip(xf, val):
            if hz < 20:
                continue
            index = np.searchsorted(upper, hz, side="left")
            if index >= len(upper):
                continue
            octave[index].append(magnitude)

        for di in range(len(octave)):
            avg.append(sum(octave[di]) / len(octave[di]))

        return lower, center, upper, avg

    def decibel(self, s_db, avg):
        inner = [10**(x/10) for x in s_db]
        inner = sum(inner)
        s_db_db = 10*math.log10(inner)

        inner = [10**(x/10) for x in avg]
        inner = sum(inner)
        avg_db = 10*math.log10(inner)

        return s_db_db, avg_db

    def close(self):
        pass

    def _do_process(self):
        #f, raw_data = self._open_and_read()
        record_time = -1
        while record_time < 0:
            record_time, raw_data = self._open_and_read()
            if record_time < 0:
                print('[Error] ', raw_data)
                print('[Info] Attempting to collect sample in 10 seconds...')
                time.sleep(10)

        print('Received frame')
        numpydata = np.hstack(raw_data)

        message = []
        window = np.hamming(self.N)  # What is this?
        for i in range(0, self.audio_rate * self.audio_sampling_seconds, self.audio_rate):
            if len(numpydata[i : i + self.N]) != self.N:
                continue

            x = numpydata[i : i + self.N] * window
            
            spectrum = np.fft.rfft(x)
            freq = np.arange((self.N / 2) + 1) / (float(self.N) / self.audio_rate)
            spectrum_mag = np.abs(spectrum) * 2 / np.sum(window)

            K = 94 + 38  ## sensitivity on 94 PBSPL is -38 db. ## mic_A,B: -38 db, mic_C, diff: -20 db
            s_dbfs = 20 * np.log10(spectrum_mag / self.ref)      ## Decibels relative to full scale
            s_db = s_dbfs + K

            lower, center, upper, avg = self.cal_freq_range(freq, s_db)
            s_db_db, avg_db = self.decibel(s_db, avg)

            avg.append(avg_db)
            message.extend(avg)

        measurement = {
            'sensor_id': 0x3000,
            'parameter_id': 1,
            'timestamp': int(record_time),
            'value': message
        }

        plugin.add_measurement(measurement)
        plugin.publish_measurements()

    def run(self):
        while True:
            self._do_process()
            time.sleep(self.config['interval'])


if __name__ == '__main__':
    SoundPressureLevel().run()
