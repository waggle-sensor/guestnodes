#!/usr/bin/env python3
# ANL:waggle-license
#  This file is part of the Waggle Platform.  Please see the file
#  LICENSE.waggle.txt for the legal details of the copyright and software
#  license.  For more details on the Waggle project, visit:
#           http://www.wa8.gl
# ANL:waggle-license
import waggle.plugin
import time
import struct
import zlib
import sys
import socket
import logging

import collections

from pymu.client import Client
from pymu.pmuDataFrame import DataFrame
from pymu.pmuLib import *
import pymu.tools as tools


def get_default_configuration():
    return {
        'upmu_address': '172.16.1.101',
        'upmu_port': 4713,
        'upmu_idcode': 1,
    }


def read_json_file(path):
    with open(path) as file:
        return json.load(file)


# def compress_spectrum_data(spectrum, time, unit=1024):
#     return zlib.compress(struct.pack('1024H', *[int(x) for x in spectrum]))


# def csvPrint(dFrame, csv_handle):
#     strOut = ""
#     for i in range(0, len(dFrame.pmus)):
#         strOut += dFrame.soc.formatted + ","
#         for j in range(0, len(dFrame.pmus[i].phasors)):
#             strOut += str(dFrame.pmus[i].phasors[j].deg) + ","
#         strOut += str(dFrame.pmus[i].freq) + ","
#         strOut += str(dFrame.pmus[i].dfreq)
#         if i != (len(dFrame.pmus) - 1):
#             strOut += ","
#     strOut += "\n"

#     csv_handle.write(strOut)


config = None
try:
    config = read_json_file('/wagglerw/waggle/upmu.conf')
except Exception:
    config = get_default_configuration()

try:
    confFrame = tools.startDataCapture(
        config['upmu_idcode'],
        config['upmu_address'],
        int(config['upmu_port'])) # IP address of openPDC
except Exception as e:
    print("## Exception on receiving confFrame: {}".format(e))
    exit()

dataRcvr = None
dataRcvr = Client(config['upmu_address'], int(config['upmu_port']), "TCP")
dataRcvr.setTimeout(10)

try:
    plugin = waggle.plugin.PrintPlugin()
    print("## Starting data collection...\n")

    while True:
        d = tools.getDataSample(dataRcvr)
        if d == '':
            raise Exception('No sample received')
        dFrame = DataFrame(d, confFrame) #, debug=True) # Create dataFrame
        #print(dFrame.soc.formatted, ', ', dFrame.pmus[0].freq)
        
except KeyboardInterrupt:
    pass
except socket.timeout:
    print("## Data not available right now...Exiting")
except Exception as e:
    print("## Exception: {}".format(e))
finally:
    dataRcvr.stop()
